name: build-tag-and-publish

on:
  push:
    tags:
      - v*
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Fetch all history for all tags and branches
        run: if $(git rev-parse --is-shallow-repository); then git fetch --prune --unshallow ; fi
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x
          source-url: https://nuget.pkg.github.com/scaleddomains/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}} 
      - name: Install dependencies
        run: dotnet restore --no-cache
      - name: Install tools
        run: dotnet tool restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Stop and remove MySQL container if exists
        run: docker rm -f mysql || true
      - name: Create mysql container
        run: docker run --publish 3306:3306 --name mysql -e  MYSQL_ALLOW_EMPTY_PASSWORD="yes" -e MYSQL_DATABASE=distributedCache-db -d mysql:latest
      - name: Wait for MySQL to come up
        run: docker exec mysql bash -c 'while ! mysql --protocol TCP -e "show databases;" > /dev/null 2>&1; do sleep 1; done'
      - name: Deploy Schema
        run: |
          docker exec mysql bash -c "mysql --protocol TCP distributedCache-db <<- 'EOF'
          $(cat test/docker/init.sql)
          EOF"
      - name: Test
        run: dotnet test --no-restore --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:ExcludeByAttribute="Obsolete%2cGeneratedCodeAttribute%2cCompilerGeneratedAttribute"
      - name: Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Process version of the tag
        id: version
        uses: ncipollo/semantic-version-action@v1
      - name: Pack
        run: dotnet pack src/ScaledDomains.Extensions.Caching.MySql/ScaledDomains.Extensions.Caching.MySql.csproj -p:PackageVersion=${{ format('{0}.{1}.{2}-beta{3}', steps.version.outputs.major, steps.version.outputs.minor, steps.version.outputs.patch, github.run_number) }} --output nuget-packages --configuration Release --no-build --no-restore
      - name: Push
        run: dotnet nuget push nuget-packages/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/scaleddomains/index.json --no-symbols true
      - name: Draft Release
        uses: release-drafter/release-drafter@v5
        id: releasedrafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          version: ${{ format('{0}.{1}.{2}', steps.version.outputs.major, steps.version.outputs.minor, steps.version.outputs.patch) }}
      - run: |
          echo "Id  : ${{ steps.releasedrafter.outputs.id }}"
          echo "Name: ${{ steps.releasedrafter.outputs.name }}"
          echo "Tag : ${{ steps.releasedrafter.outputs.tag_name }}"
