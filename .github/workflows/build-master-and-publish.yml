name: build-master-and-publish

on:
  push:
    branches: [ master ]
    
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Fetch all history for all tags and branches
      run: if $(git rev-parse --is-shallow-repository); then git fetch --prune --unshallow ; fi
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.3
      with:
          versionSpec: '5.2.x'
    - name: Install dependencies
      run: dotnet restore --no-cache
    - name: Install tools
      run: dotnet tool restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Stop and remove MySQL container if exists
      run: docker rm -f mysql || true
    - name: Create mysql container
      run: docker run --publish 3306:3306 --name mysql -e  MYSQL_ALLOW_EMPTY_PASSWORD="yes" -e MYSQL_DATABASE=distributedCache-db -d mysql:latest 
    - name: Wait for MySQL to come up
      run: docker exec mysql bash -c 'while ! mysql --protocol TCP -e "show databases;" > /dev/null 2>&1; do sleep 1; done'
    - name: Deploy Schema
      run: |
        docker exec mysql bash -c "mysql --protocol TCP distributedCache-db <<- 'EOF'
        $(cat test/docker/init.sql)
        EOF"
    - name: Test
      run: dotnet test --no-restore --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:ExcludeByAttribute="Obsolete%2cGeneratedCodeAttribute%2cCompilerGeneratedAttribute"
    - name: Use GitVersion
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.3
    - name: Codecov
      uses: codecov/codecov-action@v1.0.13
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    - run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSourcePadded }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
    - name: Pack
      run: dotnet pack src/ScaledDomains.Extensions.Caching.MySql/ScaledDomains.Extensions.Caching.MySql.csproj -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }} --output nuget-packages --configuration Release --no-build --no-restore
    - name: Push
      run: |
        dotnet nuget add source https://nuget.pkg.github.com/scaleddomains/index.json -n scaleddomains -u scaleddomains -p ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --configfile ./NuGet.Config && \
        dotnet nuget push nuget-packages/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source scaleddomains --no-symbols true --skip-duplicate true && \
        dotnet nuget remove source scaleddomains
