name: build-master-and-publish

on:
  push:
    branches: [ master ]
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Fetch all history for all tags and branches
      run: if $(git rev-parse --is-shallow-repository); then git fetch --prune --unshallow ; fi
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.301
    - name: Install dependencies
      run: dotnet restore --no-cache
    - name: Install tools
      run: dotnet tool restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Stop and remove MySQL container if exists
      run: docker rm -f mysql || true
    - name: Create mysql container
      run: docker run --publish 3306:3306 --name mysql -e  MYSQL_ALLOW_EMPTY_PASSWORD="yes" -e MYSQL_DATABASE=distributedCache-db -d mysql:latest 
    - name: Wait for MySQL to come up
      run: docker exec mysql bash -c 'while ! mysql --protocol TCP -e "show databases;" > /dev/null 2>&1; do sleep 1; done'
    - name: Deploy Schema
      run: |
        docker exec mysql bash -c "mysql --protocol TCP distributedCache-db <<- 'EOF'
        $(cat test/docker/init.sql)
        EOF"
    - name: Test
      run: dotnet test --no-restore --no-build --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:ExcludeByAttribute="Obsolete%2cGeneratedCodeAttribute%2cCompilerGeneratedAttribute"
    - name: Codecov
      uses: codecov/codecov-action@v1.0.13
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: 'Get Previous tag'
      id: previoustag
      uses: "WyriHaximus/github-action-get-previous-tag@master"
    - name: Process version of the tag
      id: version
      uses: ncipollo/semantic-version-action@v1
      with:
        tag: ${{ steps.previoustag.outputs.tag }}
    - name: Draft Release
      uses: release-drafter/release-drafter@v5
      id: releasedrafter
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        version: ${{ format('{0}.{1}.{2}', steps.version.outputs.major, steps.version.outputs.minor, steps.version.outputs.patch) }}
    - run: |
        echo "Id  : ${{ steps.releasedrafter.outputs.id }}"
        echo "Name: ${{ steps.releasedrafter.outputs.name }}"
        echo "Tag : ${{ steps.releasedrafter.outputs.tag_name }}"
    # steps:
    # - name: Pack
    #   run: dotnet pack src/ScaledDomains.Extensions.Caching.MySql/ScaledDomains.Extensions.Caching.MySql.csproj -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }} --output nuget-packages --configuration Release --no-build --no-restore
    # - name: Push
    #   run: |
    #     dotnet nuget add source https://nuget.pkg.github.com/scaleddomains/index.json -n scaleddomains -u scaleddomains -p ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --configfile ./NuGet.Config && \
    #     dotnet nuget push nuget-packages/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source scaleddomains --no-symbols true --skip-duplicate true && \
    #     dotnet nuget remove source scaleddomains
    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: ${{ format('v{0}', steps.gitversion.outputs.nuGetVersionV2) }}
    #     release_name: Release ${{ format('v{0}', steps.gitversion.outputs.nuGetVersionV2) }}
    #     body: |
    #       Changes in this Release
    #       - First Change
    #       - Second Change
    #     draft: false
    #     prerelease: false